- content_for :page_title
  = "Application details"

= form_for @form, as: :online_application, url: online_application_path, method: :put, html: { autocomplete: 'off' } do |f|

  .govuk-grid-row
    .govuk-grid-column-two-thirds
      h1.govuk-heading-xl Application details

      p.util_mb-0 Full name
      p: strong= @online_application.full_name

      - if @online_application.partner_full_name.present?
        p.util_mb-0 Partner's Full name
        p = @online_application.partner_full_name

      - if @online_application.partner_date_of_birth.present?
        p.util_mb-0 Partner's date of birth
        p = @online_application.formated_partner_date_of_birth

      - if @online_application.partner_ni_number.present?
        p.util_mb-0 Partner's National Insurance number
        p =@online_application.formated_partner_ni_number

      .govuk-form-group.group-level
        = f.label :fee, class: 'govuk-label'
        span.govuk-error-message
          = f.label :fee, @form.errors[:fee].join(', '), class: 'error' if @form.errors[:fee].present?
        .field-wrapper
          span.prefix £
          = f.text_field :fee, { value: "#{@form.fee.to_f if @form.fee}", class: 'govuk-input' }

      .govuk-form-group.group-level
        fieldset.govuk-fieldset
          legend.visuallyhidden Select jurisdiction
          = f.label :jurisdiction_id, class: 'govuk-label'
          span.govuk-error-message
            = f.label :jurisdiction_id, @form.errors[:jurisdiction_id].join(', '), class: 'error' if @form.errors[:jurisdiction_id].present?
          = f.hidden_field :jurisdiction_id, value: nil
          - if @jurisdictions.present?
            .govuk-radios.govuk-radios--small
              =f.collection_radio_buttons(:jurisdiction_id, @jurisdictions, :id, :display_full, include_hidden: true) do |b|
                .govuk-radios__item
                  = b.radio_button(data: @form.jurisdiction_id, class: 'govuk-radios__input')
                  = b.label(class: 'govuk-label govuk-radios__label')

          - else
            = t('error_messages.jurisdictions.none_in_office')

      .govuk-form-group.group-level
        p.util_mb-0 =t('date_submitted', scope: @form.i18n_scope)
        p: strong.date_sumitted= date_submitted(@online_application)

      .govuk-form-group.group-level
        legend.govuk-fieldset__legend
          =t('date_received', scope: @form.i18n_scope)

        div.govuk-hint = t('date_hint', scope: @form.i18n_scope)
        span.govuk-error-message
          = f.label :date_received, @form.errors[:date_received].join(', '), class: 'error' if @form.errors[:date_received].present?
        .govuk-date-input
          .govuk-date-input__item
            .govuk-form-group.govuk-form-group-day
              = f.label :day_date_received, class: 'govuk-label'
              = f.text_field :day_date_received, class: 'govuk-input govuk-date-input__input govuk-input--width-2', type:"number", pattern: "[0-9]*", min: "0", max: "31"
          .govuk-date-input__item
            .govuk-form-group.govuk-form-group-month
              = f.label :month_date_received, class: 'govuk-label'
              = f.text_field :month_date_received, class: 'govuk-input govuk-date-input__input govuk-input--width-2', type:"number", pattern: "[0-9]*", min: "0", max: "12"
          .govuk-date-input__item
            .govuk-form-group.govuk-form-group-year
              = f.label :year_date_received, class: 'govuk-label'
              = f.text_field :year_date_received, class: 'govuk-input govuk-date-input__input govuk-input--width-4', type:"number", pattern: "[0-9]*"

        .govuk-form-group.group-level
            fieldset.discretion_applied.start-hidden
              .panel-indent
                = f.label :discretion_applied, class: 'govuk-label'
                span.govuk-error-message
                  = f.label :discretion_applied, @form.errors[:discretion_applied].join(', '), class: 'error' if @form.errors[:discretion_applied].present?
                .govuk-checkboxes.govuk-checkboxes--small
                  .govuk-checkboxes__item
                    = f.radio_button :discretion_applied, 'false', { class: 'govuk-checkboxes__input show-hide-section' }
                    = f.label t('discretion_applied_false', scope: @form.i18n_scope), class: 'govuk-label govuk-checkboxes__label', for: 'online_application_discretion_applied_false'
                  .govuk-checkboxes__item
                    = f.radio_button :discretion_applied, 'true', { class: 'govuk-checkboxes__input show-hide-section', data: { section: 'discretion-applied-yes', show: 'true'} }
                    = f.label t('discretion_applied_true', scope: @form.i18n_scope), class: 'govuk-label govuk-checkboxes__label', for: 'online_application_discretion_applied_true'


      .govuk-form-group.group-level
        = f.label :form_name, class: 'govuk-label'
          =t('form_name', scope: @form.i18n_scope)
          span.hint.block = t('form_name_hint', scope: @form.i18n_scope)
        span.govuk-error-message
          = f.label :form_name, @form.errors[:form_name].join(', '), class: 'error' if @form.errors[:form_name].present?
        = f.text_field :form_name, { class: 'govuk-input govuk-!-width-one-half' }

      .govuk-form-group.group-level
        = f.label :case_number, class: 'govuk-label'
          = t('case_number', scope: @form.i18n_scope)
        - if @form.errors[:case_number].present?
          span.govuk-error-message
            = f.label :case_number, @form.errors[:case_number].join(', '), class: 'error'
        = f.text_field :case_number, { class: 'govuk-input govuk-!-width-one-half' }

      .govuk-form-group.group-level
        .govuk-checkboxes.govuk-checkboxes--small
          fieldset.govuk-fieldset
            legend.visuallyhidden Emergency case details
            .govuk-checkboxes__item
              = f.check_box :emergency, { class: 'govuk-checkboxes__input show-hide-checkbox', data: { section: 'emergency' } }
              = f.label :emergency, class: 'govuk-label govuk-checkboxes__label', for: 'online_application_emergency'


            #emergency-only.start-hidden
              .govuk-form-group.panel-indent.util_mt-0
                = f.label :emergency_reason, class: 'govuk-label'
                span.govuk-error-message
                  = f.label :emergency_reason, @form.errors[:emergency_reason].join(', '), class: 'error' if @form.errors[:emergency_reason].present?
                = f.text_area :emergency_reason, { class: 'govuk-textarea' }


      = f.submit 'Next', class: 'govuk-button'

    aside.govuk-grid-column-one-third
      .guidance
        h2.govuk-heading-m Before you start
        h3.govuk-heading-s In all cases, check the applicant is not:
        ul.govuk-list.govuk-list--bullet
          li receiving legal aid
          li a vexatious litigant, or bound by an order
          li a company, charity or not for profit organisation
        p = link_to 'What to do if the applicant is one of these', guide_process_application_path(anchor: 'check-applicant-is-not'), target: 'blank'
        h3.govuk-heading-s Check the fee:
        ul.govuk-list.govuk-list--bullet
          li was not processed through the money claim online (MCOL)
          li is not for a search or request for duplicate documents (unless the applicant did not receive the originals or had no fixed address when an order was made)
        p = link_to 'What to do if the fee is one of these', new_process_application_url, target: 'blank'
        h3.govuk-heading-s Remember:
        ul.govuk-list.govuk-list--bullet
          li If County is the jurisdiction for a new issue application, you will need to select which claim type the N1 form relates to from the drop-down list provided
          li to complete the case number the application relates to if required. You may need to amend the entry to reflect the correct case number entered by the applicant
          li to complete the form number the application relates to. You may need to amend the entry to reflect the correct form number entered by the applicant

        h2.govuk-heading-m Emergency cases

        p An emergency case is one where delay risks harm to the applicant or to the applicant’s case.

        h3.govuk-heading-s Example of emergency cases:
        ul.govuk-list.govuk-list--bullet
          li suspending an eviction
          li debtor insolvency petition
          li children or vulnerable adults
          li domestic violence
          li injunctions
          li ‘out of hours’ provisions at the Royal Courts of Justice

        p = link_to 'What to do if the application can’t be processed before the emergency application is heard', new_process_application_url, target: 'blank'

